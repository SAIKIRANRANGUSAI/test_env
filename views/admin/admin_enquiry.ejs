<%- include('../layouts/admin_layouts_header', { title: 'Admin | Enquiries', currentPage: 'enquiry' }) %>
<%- include('../layouts/admin_layouts_sidebar', { currentPage: 'enquiry' }) %>

<div class="admin-container">
    <h1>Manage Enquiries & Related Data</h1>

    <!-- Message Display -->
    <% if (message) { %>
        <div class="alert alert-success">
            <%= message %>
            <button type="button" class="close-alert" onclick="this.parentElement.style.display='none'">×</button>
        </div>
    <% } %>
    
    <% if (error) { %>
        <div class="alert alert-error">
            <%= error %>
            <button type="button" class="close-alert" onclick="this.parentElement.style.display='none'">×</button>
        </div>
    <% } %>

    <!-- ===================== Institutions ===================== -->
    <section class="section-box" id="institutionBoxs">
        <h2>Institutions</h2>
        <button onclick="showInstitutionForm()" class="btn-primary">Add Institution</button>
        
        <!-- Institution Form (Add/Edit) -->
        <div id="institutionForm" class="form-popup" style="display:none;">
            <form method="POST" enctype="multipart/form-data" id="institutionFormElement">
                <input type="hidden" name="id" id="institutionId">
                <input type="hidden" name="currentLogo" id="currentLogoInput">
                
                <div class="form-group">
                    <label for="institutionType">Type *</label>
                    <select name="type" id="institutionType" required>
                        <option value="">Select Type</option>
                        <option value="Bank">Bank</option>
                        <option value="NBFC">NBFC</option>
                    </select>
                    <small class="error-text" id="institutionTypeError" style="display:none;color:#dc3545;">Please select a type</small>
                </div>
                
                <div class="form-group">
                    <label for="institutionName">Name *</label>
                    <input type="text" name="name" id="institutionName" required pattern="[A-Za-z0-9\s]{2,100}" title="Name must be 2-100 characters, letters, numbers, and spaces only">
                    <small class="error-text" id="institutionNameError" style="display:none;color:#dc3545;">Please enter a valid name (2-100 characters)</small>
                </div>
                
                <div class="form-group">
                    <label for="institutionLogo">Logo</label>
                    <input type="file" name="logo" id="institutionLogo" accept="image/jpeg,image/png,image/gif">
                    <small>Accepted formats: JPG, PNG, GIF. Max size: 2MB, Aspect ratio value: 1679∶1678</small>
                    
                    <div id="logoPreview" style="margin-top: 10px;">
                        <img id="currentLogo" style="max-width:100px; display:none;" loading="lazy">
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="institutionDetails">Details</label>
                    <textarea name="details" id="institutionDetails" rows="4"></textarea>
                    <small class="text-muted d-block">
  Use up to 120 characters for rate details.
</small>
                </div>
                
                <div class="form-buttons">
                    <button type="submit" id="institutionSubmitBtn" class="btn-primary">Save Institution</button>
                    <button type="button" onclick="hideInstitutionForm()" class="btn-secondary">Cancel</button>
                </div>
            </form>
        </div>

        <!-- Institutions Table -->
        <% if (institutions.length > 0) { %>
            <table class="data-table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Type</th>
                        <th>Name</th>
                        <th>Logo</th>
                        <th>Details</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% institutions.forEach((inst, index) => { %>
                        <tr>
                            <td><%= index + 1 %></td>
                            <td><span class="badge badge-<%= inst.type === 'Bank' ? 'primary' : 'secondary' %>"><%= inst.type %></span></td>
                            <td><strong><%= inst.name %></strong></td>
                            <td>
                                <% if(inst.logo){ %>
                                    <img src="<%= inst.logo %>" width="50" height="50" style="object-fit: cover; border-radius: 4px;" alt="<%= inst.name %> logo" loading="lazy">
                                <% } else { %>
                                    <span class="no-data">No Logo</span>
                                <% } %>
                            </td>
                            <td title="<%- inst.details %>">
                                <%- inst.details && inst.details.length > 50 ? inst.details.substring(0,50)+'...' : inst.details || 'No details' %>
                            </td>
                            <td class="action-buttons">
                                <button class="btn-edit" onclick='editInstitution(<%- JSON.stringify(inst).replace(/</g, "&lt;").replace(/>/g, "&gt;") %>)'>Edit</button>
                                <form action="/admin/institutions/delete/<%= inst.id %>" method="POST" style="display:inline;" class="delete-form">
                                    <button type="submit" class="btn-delete">Delete</button>
                                </form>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        <% } else { %>
            <div class="no-data-message">
                <p>No institutions found. Click "Add Institution" to create one.</p>
            </div>
        <% } %>
    </section>

    <!-- ===================== States & Districts ===================== -->
    <section class="section-box">
        <h2>States & Districts</h2>

        <div class="form-row">
            <!-- Add State Form -->
            <form action="/admin/states/add" method="POST" class="inline-form">
                <div class="form-group">
                    <input type="text" name="name" placeholder="State Name" required>
                </div>
                <button type="submit" class="btn-primary">Add State</button>
            </form>

            <!-- Add District Form -->
            <form action="/admin/districts/add" method="POST" class="inline-form">
                <div class="form-group">
                    <select name="state_id" required>
                        <option value="">Select State</option>
                        <% states.forEach(state => { %>
                            <option value="<%= state.id %>"><%= state.name %></option>
                        <% }) %>
                    </select>
                </div>
                <div class="form-group">
                    <input type="text" name="name" placeholder="District Name" required>
                </div>
                <button type="submit" class="btn-primary">Add District</button>
            </form>
        </div>

        <div class="tables-container">
            <!-- States Table -->
            <div class="table-section">
                <h3>States</h3>
                <% if (states.length > 0) { %>
                    <table class="data-table">
                        <thead>
                            <tr><th>#</th><th>State</th><th>Actions</th></tr>
                        </thead>
                        <tbody>
                            <% states.forEach((state, index) => { %>
                                <tr>
                                    <td><%= index+1 %></td>
                                    <td><%= state.name %></td>
                                    <td>
                                        <form action="/admin/states/delete/<%= state.id %>" method="POST" style="display:inline;" class="delete-form">
                                            <button type="submit" class="btn-delete" data-name="<%= state.name %>">Delete</button>
                                        </form>
                                    </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                <% } else { %>
                    <p class="no-data">No states found</p>
                <% } %>
            </div>

            <!-- Districts Table -->
            <div class="table-section">
                <h3>Districts</h3>
                <% if (districts.length > 0) { %>
                    <table class="data-table">
                        <thead>
                            <tr><th>#</th><th>District</th><th>State</th><th>Actions</th></tr>
                        </thead>
                        <tbody>
                            <% districts.forEach((dist, index) => { %>
                                <tr>
                                    <td><%= index+1 %></td>
                                    <td><%= dist.name %></td>
                                    <td><%= dist.state_name %></td>
                                    <td>
                                        <form action="/admin/districts/delete/<%= dist.id %>" method="POST" style="display:inline;" class="delete-form">
                                            <button type="submit" class="btn-delete" data-name="<%= dist.name %>">Delete</button>
                                        </form>
                                    </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                <% } else { %>
                    <p class="no-data">No districts found</p>
                <% } %>
            </div>
        </div>
    </section>
</div>

<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- CKEditor -->
<script src="https://cdn.ckeditor.com/ckeditor5/39.0.1/classic/ckeditor.js"></script>

<script>
    let institutionEditor = null;

    // Initialize CKEditor with error handling
    function initializeCKEditor() {
        const editorElement = document.querySelector('#institutionDetails');
        if (!editorElement) {
            console.error('CKEditor textarea not found');
            return;
        }
        ClassicEditor.create(editorElement)
            .then(editor => {
                institutionEditor = editor;
                console.log('CKEditor initialized successfully');
            })
            .catch(error => {
                console.error('CKEditor initialization error:', error);
            });
    }

    // Initialize CKEditor on DOM load
    document.addEventListener('DOMContentLoaded', function () {
        initializeCKEditor();
    });

    function showInstitutionForm() {
        const formPopup = document.getElementById('institutionForm');
        if (formPopup) {
            formPopup.style.display = 'block';
            resetInstitutionForm();
            console.log('Institution form shown'); // Debug log
        } else {
            console.error('Institution form element not found');
        }
    }
    
    function hideInstitutionForm() {
        const formPopup = document.getElementById('institutionForm');
        if (formPopup) {
            formPopup.style.display = 'none';
            resetInstitutionForm();
            console.log('Institution form hidden'); // Debug log
        }
    }

    function resetInstitutionForm() {
        const form = document.getElementById('institutionFormElement');
        const submitBtn = document.getElementById('institutionSubmitBtn');
        if (!form || !submitBtn) {
            console.error('Form or submit button not found');
            return;
        }
        form.reset();
        document.getElementById('institutionId').value = '';
        document.getElementById('currentLogoInput').value = '';
        const currentLogo = document.getElementById('currentLogo');
        if (currentLogo) {
            currentLogo.style.display = 'none';
            currentLogo.src = '';
        }
        submitBtn.textContent = 'Save Institution';
        form.action = '/admin/institutions/add';
        const institutionType = document.getElementById('institutionType');
        if (institutionType) {
            institutionType.selectedIndex = 0;
        }
        if (institutionEditor) {
            institutionEditor.setData('');
        }
        // Clear error messages
        document.querySelectorAll('.error-text').forEach(el => el.style.display = 'none');
        // console.log('Institution form reset'); // Debug log
    }

    function editInstitution(inst) {
        // console.log('Editing institution:', inst); // Debug log
        try {
            // Sanitize inst data to prevent XSS
            const institution = {
            id: inst.id || '',
            type: inst.type || '',
            name: inst.name || '',
            logo: inst.logo || '',
            details: inst.details || ''
            };

            showInstitutionForm();

            const form = document.getElementById('institutionFormElement');
            const institutionId = document.getElementById('institutionId');
            const institutionType = document.getElementById('institutionType');
            const institutionName = document.getElementById('institutionName');
            const currentLogoInput = document.getElementById('currentLogoInput');
            const currentLogo = document.getElementById('currentLogo');
            const submitBtn = document.getElementById('institutionSubmitBtn');

            if (!form || !institutionId || !institutionType || !institutionName || !currentLogoInput || !currentLogo || !submitBtn) {
            console.error('Form elements missing');
            Swal.fire({
                title: 'Error',
                text: 'Form elements not found. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
             // Reload page
            }

            // Set form action for edit
            form.action = `/admin/institutions/edit/${institution.id}`;
            institutionId.value = institution.id;
            institutionType.value = institution.type;
            institutionName.value = institution.name;

            // Handle logo
            if (institution.logo) {
            currentLogo.src = institution.logo;
            currentLogo.style.display = 'inline';
            currentLogoInput.value = institution.logo;
            } else {
            currentLogo.style.display = 'none';
            currentLogoInput.value = '';
            }

            // Set CKEditor content with delay to ensure editor is ready
            if (institutionEditor) {
            setTimeout(() => {
                institutionEditor.setData(institution.details);
                console.log('CKEditor data set:', institution.details); // Debug log
            }, 100);
            } else {
            console.warn('CKEditor not initialized, setting textarea directly');
            document.getElementById('institutionDetails').value = institution.details;
            }

            submitBtn.textContent = 'Update Institution';

            // Swal.fire({
            // title: 'Edit Mode',
            // text: `You are now editing ${institution.name}`,
            // icon: 'info',
            // timer: 2000,
            // showConfirmButton: false
            // });

            // Smooth scroll to the institutions section (no location.href)
            (function scrollToSection() {
            const target = document.getElementById('institutionBoxs') || document.getElementById('institutionBox');
            if (!target) {
                console.warn('Target scroll element not found');
                return;
            }
            // Make target focusable for accessibility, then focus without scrolling
            const hadTabindex = target.hasAttribute('tabindex');
            const prevTabindex = target.getAttribute('tabindex');
            if (!hadTabindex) target.setAttribute('tabindex', '-1');
            target.focus({ preventScroll: true });

            // Compute offset (adjust 20px for spacing/header if needed)
            const offset = 20;
            const top = target.getBoundingClientRect().top + window.pageYOffset - offset;

            window.scrollTo({ top, behavior: 'smooth' });

            // Restore tabindex if it didn't exist before
            // if (!hadTabindex) {
            //     // remove tabindex after a short delay to allow focus behavior
            //     setTimeout(() => {
            //     target.removeAttribute('tabindex');
            //     }, 1000);
            // } else if (prevTabindex !== null) {
            //     target.setAttribute('tabindex', prevTabindex);
            // }
            })();
        } catch (error) {
            console.error('Error in editInstitution:', error);
            Swal.fire({
                title: 'Error',
                text: 'Failed to load institution data. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    }

    // Preview logo when file is selected
    document.getElementById('institutionLogo').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            // Validate file size (2MB max)
            if (file.size > 2 * 1024 * 1024) {
                Swal.fire({
                    title: 'File Too Large',
                    text: 'File size must be less than 2MB',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                this.value = '';
                return;
            }
            
            // Validate file type
            const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
            if (!validTypes.includes(file.type)) {
                Swal.fire({
                    title: 'Invalid File Type',
                    text: 'Please select a JPG, PNG, or GIF image',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                this.value = '';
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const currentLogo = document.getElementById('currentLogo');
                if (currentLogo) {
                    currentLogo.src = e.target.result;
                    currentLogo.style.display = 'inline';
                    console.log('Logo preview updated'); // Debug log
                }
            };
            reader.readAsDataURL(file);
        } else {
            console.log('No file selected'); // Debug log
        }
    });

    // Validate form fields
    function validateInstitutionForm() {
        let isValid = true;
        const type = document.getElementById('institutionType');
        const name = document.getElementById('institutionName');
        const typeError = document.getElementById('institutionTypeError');
        const nameError = document.getElementById('institutionNameError');

        // Clear previous errors
        typeError.style.display = 'none';
        nameError.style.display = 'none';

        // Validate type
        if (!type.value) {
            typeError.style.display = 'block';
            isValid = false;
        }

        // Validate name
        const nameRegex = /^[A-Za-z0-9\s]{2,100}$/;
        if (!name.value || !nameRegex.test(name.value)) {
            nameError.style.display = 'block';
            isValid = false;
        }

        return isValid;
    }

    // Handle form submission with SweetAlert
    document.getElementById('institutionFormElement').addEventListener('submit', function(e) {
        e.preventDefault();
        console.log('Institution form submitted'); // Debug log
        
        // Validate form
        if (!validateInstitutionForm()) {
            Swal.fire({
                title: 'Invalid Input',
                text: 'Please fill in all required fields correctly.',
                icon: 'warning',
                confirmButtonText: 'OK'
            });
            return;
        }
        
        // Sync CKEditor content
        let details = '';
        if (institutionEditor) {
            try {
                details = institutionEditor.getData();
                document.getElementById('institutionDetails').value = details;
                console.log('CKEditor data synced:', details); // Debug log
            } catch (error) {
                console.error('Error syncing CKEditor data:', error);
            }
        } else {
            details = document.getElementById('institutionDetails').value;
            console.log('Using raw textarea for details:', details); // Debug log
        }
        
        // Show loading state
        const submitBtn = document.getElementById('institutionSubmitBtn');
        if (submitBtn) {
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            submitBtn.disabled = true;
            
            // Collect and log form data
            const formData = new FormData(this);
            const formDataObj = Object.fromEntries(formData);
            console.log('Form data:', formDataObj); // Debug log

            // Submit the form via fetch
            fetch(this.action, {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    console.log('Form submission response:', {
                        status: response.status,
                        statusText: response.statusText,
                        headers: Object.fromEntries(response.headers.entries())
                    }); // Debug log
                    if (!response.ok) {
                        return response.text().then(text => {
                            throw new Error(`HTTP error! Status: ${response.status}, Message: ${text}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Form submission data:', data); // Debug log
                    if (data.success) {
                        Swal.fire({
                            title: 'Success',
                            text: data.message || 'Institution saved successfully!',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            window.location.reload(); // Reload to reflect changes
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: data.message || 'Failed to save institution.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(error => {
                    console.error('Submission error:', error.message); // Debug log
                    let errorMessage = 'An error occurred while saving the institution. Please try again.';
                    if (error.message.includes('400')) {
                        errorMessage = 'Invalid input data. Please check the form fields.';
                    } else if (error.message.includes('500')) {
                        errorMessage = 'Server error. Please try again later or contact support.';
                    } else if (error.message.includes('Failed to fetch')) {
                        errorMessage = 'Network error. Please check your connection and try again.';
                    }
                    Swal.fire({
                        title: 'Error',
                        text: errorMessage,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                })
                .finally(() => {
                    submitBtn.innerHTML = originalText;
                    submitBtn.disabled = false;
                });
        }
    });

    // Handle delete forms with SweetAlert confirmation
    document.addEventListener('DOMContentLoaded', function() {
        const deleteForms = document.querySelectorAll('.delete-form');
        
        deleteForms.forEach(form => {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                console.log('Delete form submitted'); // Debug log
                
                const button = this.querySelector('.btn-delete');
                const itemName = button.getAttribute('data-name') || 'this item';
                
                Swal.fire({
                    title: 'Are you sure?',
                    text: `You are about to delete ${itemName}. This action cannot be undone!`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        Swal.fire({
                            title: 'Deleting...',
                            text: 'Please wait',
                            allowOutsideClick: false,
                            didOpen: () => {
                                Swal.showLoading();
                            }
                        });
                        this.submit();
                    }
                });
            });
        });
    });

    // Auto-hide alerts after 5 seconds
    setTimeout(() => {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            alert.style.display = 'none';
        });
    }, 5000);

    // Close form when clicking outside, excluding edit and add buttons
    document.addEventListener('click', function(e) {
        const formPopup = document.getElementById('institutionForm');
        const addButton = document.querySelector('button.btn-primary');
        const editButtons = document.querySelectorAll('.btn-edit');
        
        if (formPopup && formPopup.style.display === 'block' && !formPopup.contains(e.target)) {
            let isEditOrAddButton = e.target === addButton || Array.from(editButtons).some(btn => btn === e.target || btn.contains(e.target));
            if (!isEditOrAddButton) {
                hideInstitutionForm();
                console.log('Form closed via click outside'); // Debug log
            }
        }
    });

    // Add Font Awesome for loading spinner
    const fontAwesome = document.createElement('link');
    fontAwesome.rel = 'stylesheet';
    fontAwesome.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css';
    document.head.appendChild(fontAwesome);
</script>

<style>
    *{
    padding: revert;
  }
    .section-box {
        background: white;
        padding: 20px;
        margin-bottom: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .form-popup {
        background: #f9f9f9;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        margin: 20px 0;
        border-left: 4px solid #007bff;
        position: relative;
        z-index: 1;
        transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
    }

    .form-popup[style*="display: none"] {
        opacity: 0;
        visibility: hidden;
    }

    .form-popup[style*="display: block"] {
        opacity: 1;
        visibility: visible;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 600;
        color: #333;
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
        font-size: 14px;
    }

    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
        border-color: #007bff;
        outline: none;
        box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
    }

    .form-group small.error-text {
        margin-top: 5px;
    }

    /* CKEditor Styling */
    .ck-editor__editable {
        min-height: 200px;
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 10px;
    }

    .ck.ck-editor {
        margin-bottom: 15px;
    }

    .ck.ck-toolbar {
        border: 1px solid #ddd;
        border-bottom: none;
        border-radius: 4px 4px 0 0;
    }

    .badge {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: 600;
    }

    .badge-primary {
        background: #007bff;
        color: white;
    }

    .badge-secondary {
        background: #6c757d;
        color: white;
    }

    .no-data-message {
        text-align: center;
        padding: 40px;
        background: #f8f9fa;
        border-radius: 8px;
        margin: 20px 0;
        color: #6c757d;
    }

    .form-row {
        display: flex;
        gap: 20px;
        margin-bottom: 30px;
        flex-wrap: wrap;
    }

    .inline-form {
        display: flex;
        gap: 10px;
        align-items: end;
    }

    .inline-form .form-group {
        margin-bottom: 0;
        flex: 1;
    }

    .tables-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 30px;
    }

    .table-section h3 {
        margin-bottom: 15px;
        color: #333;
        border-bottom: 2px solid #007bff;
        padding-bottom: 8px;
    }

    .data-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

    .data-table th,
    .data-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #eee;
    }

    .data-table th {
        background: #f5f5f5;
        font-weight: 600;
        color: #333;
    }

    .action-buttons {
        display: flex;
        gap: 8px;
    }

    .btn-primary {
        background: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 600;
        transition: background 0.2s;
    }

    .btn-primary:hover {
        background: #0056b3;
    }

    .btn-primary:disabled {
        background: #6c757d;
        cursor: not-allowed;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: background 0.2s;
    }

    .btn-secondary:hover {
        background: #545b62;
    }

    .btn-edit {
        background: #28a745;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
        transition: background 0.2s;
    }

    .btn-edit:hover {
        background: #218838;
    }

    .btn-delete {
        background: #dc3545;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
        transition: background 0.2s;
    }

    .btn-delete:hover {
        background: #c82333;
    }

    .form-buttons {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    .alert {
        padding: 12px 20px;
        margin-bottom: 20px;
        border-radius: 4px;
        position: relative;
        animation: slideIn 0.3s ease;
    }

    @keyframes slideIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .alert-success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .close-alert {
        position: absolute;
        right: 10px;
        top: 10px;
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        color: inherit;
    }

    .no-data {
        color: #6c757d;
        font-style: italic;
    }

    @media (max-width: 768px) {
        .tables-container {
            grid-template-columns: 1fr;
        }
        
        .form-row {
            flex-direction: column;
        }
        
        .inline-form {
            flex-direction: column;
            align-items: stretch;
        }
        
        .action-buttons {
            flex-direction: column;
        }
        
        .form-popup {
            margin: 10px;
            padding: 15px;
        }
    }

    /* Loading spinner */
    .fa-spin {
        animation: fa-spin 1s infinite linear;
    }

    @keyframes fa-spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

<%- include('../layouts/admin_layouts_footer') %>